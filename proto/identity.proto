syntax = "proto3";
package cnpgi.identity.v1;
option go_package = "github.com/cloudnative-pg/cnpg-i/pkg/identity";

service Identity {
  // GetPluginMetadata gets the plugin metadata
  rpc GetPluginMetadata(GetPluginMetadataRequest) returns (GetPluginMetadataResponse) {}

  // GetPluginCapabilities gets information about this plugin
  rpc GetPluginCapabilities(GetPluginCapabilitiesRequest) returns (GetPluginCapabilitiesResponse) {}

  // Probe is used to tell if the plugin is ready to receive requests
  rpc Probe (ProbeRequest) returns (ProbeResponse) {}
}

message GetPluginMetadataRequest {
  // Intentionally empty.
}

message GetPluginMetadataResponse {
  // The name MUST follow domain name notation format
  // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
  // include the plugin's host company name and the plugin name,
  // to minimize the possibility of collisions. It MUST be 63
  // characters or less, beginning and ending with an alphanumeric
  // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
  // alphanumerics between. This field is REQUIRED.
  string name = 1;

  // This field is REQUIRED. Value of this field is opaque.
  string version = 2;

  // A name to display for the plugin. This field is REQUIRED.
  string display_name = 3;

  // A description for the plugin. This field is REQUIRED.
  string description = 4;

  // URL of the home page of the plugin project.
  string project_url = 5;

  // URL of the source code repository for the plugin project.
  string repository_url = 6;

  // License of the plugin. This field is REQUIRED.
  string license = 7;

  // URL of the license of the plugin. This field is REQUIRED.
  string license_url = 8;

  // Maturity level (alpha, beta, stable)
  string maturity = 9;

  // Provider/vendor of the plugin, e.g. an organization
  string vendor = 10;

  // This field is OPTIONAL. Values are opaque.
  map<string, string> manifest = 11;
}

message GetPluginCapabilitiesRequest {
  // Intentionally empty.
}

message GetPluginCapabilitiesResponse {
  // All the capabilities that the controller service supports. This
  // field is OPTIONAL.
  repeated PluginCapability capabilities = 1;
}

message PluginCapability {
  message Service {
    enum Type {
      TYPE_UNSPECIFIED = 0;

      // TYPE_OPERATOR_SERVICE indicated that the Plugin provider RPCs
      // for the Operator service.
      // The presence of this capability determines whether the CO will
      // attempt to invoke the REQUIRED Operator RPCs, as well
      // as specific RPCs as indicated by GetCapabilities.
      TYPE_OPERATOR_SERVICE = 1;

      // TYPE_WAL_SERVICE indicates that the Plugin provides RPCs for
      // the WAL service. Plugins MAY provide this capability.
      // The presence of this capability determines whether the CO will
      // attempt to invoke the REQUIRED WALService RPCs, as well
      // as specific RPCs as indicated by GetCapabilities.
      TYPE_WAL_SERVICE = 2;

      // TYPE_BACKUP_SERVICE indicates that the Plugin provides RPCs for
      // the Backup service.
      // The presence of this capability determines whether the CO will
      // attempt to invoke the REQUIRED Backup Service RPCs, as well
      // as specific RPCs as indicated by GetCapabilities.
      TYPE_BACKUP_SERVICE = 3;

      // TYPE_LIFECYCLE_SERVICE indicates that the Plugin provides RPCs for
      // the Lifecycle service.
      TYPE_LIFECYCLE_SERVICE = 4;

      // TYPE_RECONCILER_HOOKS indicates that the Plugin provides RPCs to
      // enhance the behavior of the reconcilers
      TYPE_RECONCILER_HOOKS = 5;

      // TYPE_RESTORE_JOB_HOOKS indicates that the Plugin provides RPCs to
      // enhance the behavior of the restore jobs
      TYPE_RESTORE_JOB = 6;
    }
    Type type = 1;
  }

  oneof type {
    Service service = 1;
  }
}

message ProbeRequest {
  // Intentionally empty.
}

message ProbeResponse {
  // This field is OPTIONAL. If not present, the caller SHALL assume
  // that the plugin is in a ready state and is accepting calls to its
  // Controller and/or Node services (according to the plugin's reported
  // capabilities).
  bool ready = 1;
}
