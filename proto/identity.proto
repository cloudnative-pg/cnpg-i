syntax = "proto3";
package cnpgi.identity.v1;
option go_package = "github.com/cloudnative-pg/cnpg-i/pkg/identity";

service Identity {
    // GetPluginInfo gets the plugin metadata
    rpc GetPluginInfo(GetPluginInfoRequest) returns (GetPluginInfoResponse) {}

    // GetPluginCapabilities gets information about this plugin
    rpc GetPluginCapabilities(GetPluginCapabilitiesRequest)  returns (GetPluginCapabilitiesResponse) {}

    // Probe is used to tell if the plugin is ready to receive requests
    rpc Probe (ProbeRequest) returns (ProbeResponse) {}
}

message GetPluginInfoRequest {
    // Intentionally empty.
}

message GetPluginInfoResponse {
    // The name MUST follow domain name notation format
    // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
    // include the plugin's host company name and the plugin name,
    // to minimize the possibility of collisions. It MUST be 63
    // characters or less, beginning and ending with an alphanumeric
    // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
    // alphanumerics between. This field is REQUIRED.
    string name = 1;

    // This field is REQUIRED. Value of this field is opaque.
    string vendor_version = 2;

    // This field is OPTIONAL. Values are opaque.
    map<string, string> manifest = 3;
}

message GetPluginCapabilitiesRequest {
  // Intentionally empty.
}

message GetPluginCapabilitiesResponse {
  // All the capabilities that the controller service supports. This
  // field is OPTIONAL.
  repeated PluginCapability capabilities = 1;
}

message PluginCapability {
  message Service {
    enum Type {
      UNKNOWN = 0;

      // WAL_SERVICE indicates that the Plugin provides RPCs for
      // the WAL service. Plugins SHOULD provide this capability.
      // The presence of this capability determines whether the CO will
      // attempt to invoke the REQUIRED WALService RPCs, as well
      // as specific RPCs as indicated by GetCapabilities.
      WAL_SERVICE = 1;
    }
    Type type = 1;
  }

  oneof type {
    Service service = 1;
  }
}

message ProbeRequest {
    // Intentionally empty.
}

message ProbeResponse {
    // This field is OPTIONAL. If not present, the caller SHALL assume
    // that the plugin is in a ready state and is accepting calls to its
    // Controller and/or Node services (according to the plugin's reported
    // capabilities).
    bool ready = 1;
}
